// automatically generated by the FlatBuffers compiler, do not modify

package AllWatchSerialize;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Id extends Table {
  public static Id getRootAsId(ByteBuffer _bb) { return getRootAsId(_bb, new Id()); }
  public static Id getRootAsId(ByteBuffer _bb, Id obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Id __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String packageName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer packageNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer packageNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String friendlyName() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer friendlyNameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer friendlyNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }

  public static int createId(FlatBufferBuilder builder,
      int packageNameOffset,
      int friendlyNameOffset) {
    builder.startObject(2);
    Id.addFriendlyName(builder, friendlyNameOffset);
    Id.addPackageName(builder, packageNameOffset);
    return Id.endId(builder);
  }

  public static void startId(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addPackageName(FlatBufferBuilder builder, int packageNameOffset) { builder.addOffset(0, packageNameOffset, 0); }
  public static void addFriendlyName(FlatBufferBuilder builder, int friendlyNameOffset) { builder.addOffset(1, friendlyNameOffset, 0); }
  public static int endId(FlatBufferBuilder builder) {
    int o = builder.endObject();
    builder.required(o, 4);  // packageName
    return o;
  }

  @Override
  protected int keysCompare(Integer o1, Integer o2, ByteBuffer _bb) { return compareStrings(__offset(4, o1, _bb), __offset(4, o2, _bb), _bb); }

  public static Id __lookup_by_key(Id obj, int vectorLocation, String key, ByteBuffer bb) {
    byte[] byteKey = key.getBytes(Table.UTF8_CHARSET.get());
    int span = bb.getInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = __indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = compareStrings(__offset(4, bb.capacity() - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return (obj == null ? new Id() : obj).__assign(tableOffset, bb);
      }
    }
    return null;
  }
}

