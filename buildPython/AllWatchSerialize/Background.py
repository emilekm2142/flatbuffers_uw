# automatically generated by the FlatBuffers compiler, do not modify

# namespace: AllWatchSerialize

import flatbuffers

class Background(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsBackground(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Background()
        x.Init(buf, n + offset)
        return x

    # Background
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Background
    def BackgroundColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Background
    def BackgroundImage(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Background
    def BackgroundImageAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Background
    def BackgroundImageLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def BackgroundStart(builder): builder.StartObject(2)
def BackgroundAddBackgroundColor(builder, backgroundColor): builder.PrependInt32Slot(0, backgroundColor, 0)
def BackgroundAddBackgroundImage(builder, backgroundImage): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(backgroundImage), 0)
def BackgroundStartBackgroundImageVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def BackgroundEnd(builder): return builder.EndObject()
